// Code generated by go-bindata.
// sources:
// codeTemple/matlab.tpl
// DO NOT EDIT!

package AimerMatlab

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _codetempleMatlabTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6b\xdc\x46\x14\xc7\xef\x02\xfd\x0f\x73\x59\x24\xed\x4a\xb6\x76\x4d\x4a\xa8\x98\x63\x43\xe9\x21\x2d\xe9\xa5\x25\xd8\xb0\xeb\x19\xa1\xa5\x6b\x49\xd1\xcc\xc2\x4c\x83\x60\xdd\x86\x26\x59\xb7\xb1\xd3\xd2\x1f\x38\x76\x7e\x94\xc2\x1a\x4a\x44\x4e\x69\x53\xdb\x31\xf4\x6f\xf1\xec\xaa\xa7\xfe\x0b\x65\x66\x64\xaf\xe4\x42\xeb\x83\x79\x6f\xbe\xdf\xcf\x9b\x37\xef\xa1\x6d\x89\x62\xff\xfc\xcd\x43\xb1\xfb\xc5\xfc\xfb\x57\xa6\x91\x0d\x00\xbc\x7b\x17\xac\xdc\x1a\xe4\x79\xd0\x12\xcf\xfe\x10\x07\x5f\x89\x6f\xa6\xe2\xed\x3d\xd3\xc8\x28\x80\x40\x89\x54\x8a\xf3\xe3\x7d\xf1\x72\xef\x42\xc4\x9a\x7b\x2f\xcf\x41\xd0\x12\xdb\xbb\xe2\xec\xcb\xf2\xb7\x43\xd3\x88\x2a\xe6\x7d\x85\x3c\x3a\x5a\x1c\xed\xcc\x0f\x26\xe2\x97\x99\x98\x9c\x98\x46\x48\x35\x76\x83\x2e\xe5\xf2\x6c\x4f\x4c\x8f\xca\xd9\xb7\xa6\x11\x92\x8a\xbe\x41\xa4\x5e\x9e\x1d\x9c\x9f\x3c\x9e\xbf\xfc\x59\x8b\x51\xc5\x46\xaa\xd5\x27\x4f\x9b\x6c\x84\x00\x4c\x87\x60\xb5\x7b\xdd\x0f\x4c\x03\x8d\x01\x04\xdd\xeb\xfe\x6a\x3a\x0c\xaa\x27\xff\xf9\x0a\x2c\xf6\xef\x89\xbd\x5f\xcf\xdf\x3c\x34\x0d\x82\x01\x24\x77\x32\x6a\x67\x83\x8d\x9e\x87\x37\x7a\x8e\xa4\xba\x00\x82\x90\x76\x42\x22\x93\xde\x45\xd2\x09\xa3\xc0\x34\x62\xb8\xf6\x8e\x2c\x6d\x1a\xad\x16\x10\x0f\x0e\xc5\x6c\x47\x7c\xfd\x83\x38\xdc\x9b\x3f\xbf\x6f\x1a\x04\x7e\x8e\xb3\x84\xd8\xb1\xaa\x23\xdf\x51\xcb\x59\x23\xe3\x4d\x11\x31\xd0\x60\x79\x23\x65\xac\xe9\xe6\x57\x68\x9e\x36\x73\xdd\xdd\xc9\x44\xcc\x76\xca\xe2\xc5\xa2\xf8\x51\x1e\x85\x49\x06\x42\xd8\x7d\x37\x36\x0d\x00\x00\xa8\x06\x2f\xa6\xcf\xff\x9a\x3c\x5b\x4c\x5f\xcf\x27\xdb\x7f\x9f\x3c\x90\xb3\xfd\x38\x4d\x32\xba\xf2\xd1\x98\x44\x2a\xba\xd9\xdf\xc2\x79\xee\x68\x4a\xfe\x35\x3d\x79\xbe\x54\x96\xcb\xd2\x05\xb5\xb2\xf4\xdf\xc2\x5b\x09\xc5\x75\x02\x34\x76\xa8\x29\xbb\x0e\xd0\x71\x16\x7f\x90\x8c\xb3\x18\xf3\xff\xeb\xa6\x61\xbe\xd2\xd6\xe3\xff\x6a\xeb\x26\xee\x67\x17\x7e\x1c\x23\x39\x2c\x8d\xa9\xd9\x95\xa7\x85\x38\xfe\x4e\x1f\x31\x66\x87\x0e\xb4\x09\xee\x10\xa7\x4d\x86\xb1\x1d\xb6\x23\xe4\x74\x70\x7b\x33\x21\x3a\x0e\x18\x54\xa6\x40\x03\x9c\xd7\x80\x4b\x93\x87\x97\x70\xc0\xa1\x32\x55\x00\xd2\x37\x20\xe2\xe1\xfa\x0d\x57\x2b\x04\x88\x41\x54\xbb\x07\xf1\x1a\xb6\xbc\xe7\x6a\xa7\x01\xe2\x10\xd5\x6e\x63\xa9\xc4\x58\x27\xa3\x6d\xc4\x57\xd5\xa7\x80\xd8\x46\xaf\x83\xb8\xfc\x16\x18\x4b\xa1\x72\x5c\x3c\x46\xb9\xb9\x27\xdd\xec\x5f\x6e\xce\x53\xc8\x2b\xb7\x69\x54\x73\x4c\x47\x09\xb5\x19\x73\x39\x77\xad\xcc\x5b\xb1\x1c\xd3\xe8\xb3\x21\xb1\x6f\x7b\x76\x36\xe8\x44\x5e\xd7\x77\x80\x8a\x3a\x32\xf2\x96\xa1\x8c\x32\x2a\xc3\x75\x47\x16\x92\x14\xc0\x77\xc6\xfd\x91\x69\x50\xcc\xa8\x76\xae\xb9\xbe\x6b\x7d\x22\xab\xaa\x33\xdf\xd5\xd4\x9a\x6b\x7d\x7a\x79\xe8\x5d\x73\xaf\xb9\xd6\x87\x2a\x1f\xd2\x11\xb6\x2d\xb1\xbd\xbb\x38\x2d\x16\xb3\x63\x31\x3d\x3a\x3f\x7e\xa4\xfe\xbf\x5e\x3c\xf9\x49\x3c\xdd\x11\xf7\x7f\x2f\x4f\x8b\xb2\x78\x5b\x16\x2f\x24\x11\x25\x23\x04\x92\x38\xb8\x7c\x4b\xd5\x78\xd5\xb5\xb3\xee\xde\xf6\x81\xbf\xee\x5a\x9f\x49\xb7\x76\xa8\x83\x86\x2f\xa3\x4e\xd3\x82\x01\x56\x64\x4d\xf4\x3c\x29\x6f\xca\x9f\xdb\xd1\x30\x26\x69\x7f\x13\xdb\xbe\xdb\x6b\xa7\x43\x39\x50\x85\x61\xb9\x27\xb9\xdc\x4d\xea\xb8\x44\x65\x72\xb3\x32\xb3\xb6\x2e\x8b\xb3\xd4\xe5\xa9\x6b\x0d\x2c\xe7\x9f\x00\x00\x00\xff\xff\x3f\xe4\xfb\xf8\xe7\x05\x00\x00")

func codetempleMatlabTplBytes() ([]byte, error) {
	return bindataRead(
		_codetempleMatlabTpl,
		"codeTemple/matlab.tpl",
	)
}

func codetempleMatlabTpl() (*asset, error) {
	bytes, err := codetempleMatlabTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codeTemple/matlab.tpl", size: 1511, mode: os.FileMode(420), modTime: time.Unix(1541938005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"codeTemple/matlab.tpl": codetempleMatlabTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"codeTemple": &bintree{nil, map[string]*bintree{
		"matlab.tpl": &bintree{codetempleMatlabTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

